// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var FoodSearchController, FoodTableController, MainFoodController, NutrientBreakdownController, PROPERTIES, diet_to_array, ensure_nutrients;

  diet_to_array = {
    'keto': [5, 75, 20],
    'zone': [40, 30, 30],
    'lowfat': [60, 10, 30],
    '80-10-10': [80, 10, 10],
    'custom': null
  };

  ensure_nutrients = ["calcium", "iron", "magnesium", "phosphorus", "potassium", "sodium", "zinc", "copper", "flouride", "manganese", "selenium", "vit_a", "vit_c", "vit_d", "vit_e", "thiamin", "riboflavin", "niacin", "pantothenic_acid", "vit_b6", "folate", "vit_b12", "choline", "vit_k", "betaine", "cholesterol", "trans_fat", "saturated_fat", "monounsaturated_fat", "polyunsaturated_fat"];

  PROPERTIES = ['calories', 'net_carbs', 'fat', 'protein', 'carbohydrate', 'fiber', 'sugar', 'calcium', 'iron', 'magnesium', 'phosphorus', 'potassium', 'sodium', 'zinc', 'copper', 'flouride', 'manganese', 'selenium', 'vit_a', 'vit_c', 'vit_d', 'vit_e', 'thiamin', 'riboflavin', 'niacin', 'pantothenic_acid', 'vit_b6', 'folate', 'vit_b12', 'vit_k', 'choline', 'betaine', 'cholesterol', 'trans_fat', 'saturated_fat', 'monounsaturated_fat', 'polyunsaturated_fat', 'omega3', 'omega6'];

  MainFoodController = function($scope, $cookies, $location, FoodData) {
    var cFoodData;
    window.mfc_scope = $scope;
    $scope.fs_toggle = true;
    _.extend($scope, FoodData);
    $scope.cookies = $cookies;
    if ($cookies.FoodData != null) {
      cFoodData = JSON.parse($cookies.FoodData);
      FoodData.ordered_selected_foods.push.apply(FoodData.ordered_selected_foods, cFoodData.ordered_selected_foods);
      _.extend(FoodData.food_amounts, cFoodData.food_amounts);
      delete $cookies.FoodData;
    }
    $location.url($location.url().replace('%23', '#'));
    $location.replace();
    $location.path("");
    FoodData.sync_from_location();
    FoodData.sync_to_location();
    FoodData.load_ordered_selected_foods();
    $scope.$watch('food_amounts', FoodData.timeout_save_wip, true);
    return $scope.$watch('ordered_selected_foods', FoodData.timeout_save_wip, true);
  };

  MainFoodController.$inject = ['$scope', '$cookies', '$location', 'FoodData'];

  FoodSearchController = function($scope, $http, FoodData) {
    window.fsc_scope = $scope;
    $scope.food_results = [];
    $scope.ready_to_select = -1;
    $scope.timeout = null;
    $http({
      method: "GET",
      url: "/food",
      params: {
        values: ["long_desc", "pk"],
        unlimited: "true"
      }
    }).success(function(data) {
      var name, pair, pk, _i, _len, _results;
      $scope.names_to_pk = {};
      $scope.names = [];
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        pair = data[_i];
        pk = pair.pk;
        name = pair.long_desc;
        $scope.names.push(name);
        _results.push($scope.names_to_pk[name] = pk);
      }
      return _results;
    });
    $scope.query_change = function() {
      clearTimeout($scope.timeout);
      if ($scope.query.length < 3) {
        $scope.food_results = [];
        return;
      }
      return $scope.timeout = setTimeout($scope.update_food_results, 800);
    };
    $scope.update_food_results = function() {
      var filterf, name, names, res, words, _i, _len;
      document.getElementById('search-list').scrollTop = 0;
      $scope.ready_to_select = -1;
      words = $scope.query.split(' ');
      filterf = function(name) {
        var word, _i, _len;
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (name.toLowerCase().indexOf(word.toLowerCase()) < 0) {
            return false;
          }
        }
        return true;
      };
      names = _.filter($scope.names, filterf);
      res = [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        res.push({
          long_desc: name,
          pk: $scope.names_to_pk[name]
        });
      }
      $scope.food_results = res;
      $scope.$apply();
    };
    $scope.query_key = function($event) {
      var can_down, can_select, can_up, has_items, key, not_over, selected;
      $event.preventDefault();
      can_up = $scope.ready_to_select > 0;
      can_down = $scope.ready_to_select < $scope.food_results.length - 1;
      not_over = $scope.ready_to_select < $scope.food_results.length;
      has_items = $scope.food_results.length > 0;
      can_select = $scope.ready_to_select > -1 && not_over && has_items;
      if ($event.keyCode === 40) {
        key = "Down";
      } else if ($event.keyCode === 38) {
        key = "Up";
      } else if ($event.keyCode === 13) {
        key = "Enter";
      } else {
        $scope.ready_to_select = -1;
        $scope.query = "";
        $scope.food_results = [];
        document.getElementById('search-list').scrollTop = 0;
        return;
      }
      if (key === "Down") {
        if (can_down) {
          $scope.ready_to_select += 1;
          if ($scope.ready_to_select > 3) {
            return document.getElementById('search-list').scrollTop += 20;
          }
        } else {
          $scope.ready_to_select = 0;
          return document.getElementById('search-list').scrollTop = 0;
        }
      } else if (key === "Up") {
        if (can_up) {
          $scope.ready_to_select -= 1;
          if ($scope.ready_to_select < $scope.food_results.length - 5) {
            return document.getElementById('search-list').scrollTop -= 20;
          }
        } else {
          $scope.ready_to_select = $scope.food_results.length - 1;
          return document.getElementById('search-list').scrollTop = 9999999;
        }
      } else if (key === "Enter" && can_select) {
        selected = $scope.food_results[$scope.ready_to_select].pk;
        $scope.select_food(selected);
        return $scope.ready_to_select = -1;
      } else {
        return $scope.ready_to_select = -1;
      }
    };
    $scope.mouseover = function(idx) {
      return $scope.ready_to_select = idx;
    };
    $scope.mouseleave = function(idx) {
      return $scope.ready_to_select = -1;
    };
    return $scope.select_food = function(pk) {
      FoodData.select_food(pk);
      $scope.query = "";
      return $scope.food_results = [];
    };
  };

  FoodSearchController.$inject = ['$scope', '$http', 'FoodData'];

  FoodTableController = function($scope, $http, $location, FoodData, Config) {
    window.ftc_scope = $scope;
    ftc_scope.loc = $location;
    _.extend($scope, FoodData);
    _.extend($scope, Config);
    $scope.selected_for_save = {};
    $scope.toggle_weights = true;
    $scope.save_as_recipe_modal = false;
    $scope.recipe_form_data = {};
    $scope.recipe_posting = false;
    $scope.trash_all_modal = false;
    $scope.none_selected_for_save = function() {
      return !_.any(_.values($scope.selected_for_save));
    };
    $scope.all_selected_for_save = function() {
      var pk, _i, _len, _ref;
      _ref = $scope.ordered_selected_foods;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pk = _ref[_i];
        if (!$scope.selected_for_save[pk]) {
          return false;
        }
      }
      return true;
    };
    $scope.change_food_amount = function() {
      return $location.search($scope.food_amounts);
    };
    $scope.add_weight = function(pk, weight) {
      var amt;
      amt = parseFloat($scope.food_amounts[pk] || 0);
      amt += parseFloat(weight);
      $scope.food_amounts[pk] = amt.toFixed(2);
      return $location.search($scope.food_amounts);
    };
    $scope.select_all_for_save = function() {
      var pk, _i, _len, _ref, _results;
      _ref = $scope.ordered_selected_foods;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pk = _ref[_i];
        _results.push($scope.selected_for_save[pk] = true);
      }
      return _results;
    };
    $scope.select_none_for_save = function() {
      var pk, _results;
      _results = [];
      for (pk in $scope.selected_for_save) {
        _results.push($scope.selected_for_save[pk] = false);
      }
      return _results;
    };
    $scope.save_as_recipe = function() {
      $scope.get_sum_selected_for_save();
      return $scope.save_as_recipe_modal = true;
    };
    $scope.save_as_recipe_modal_close = function() {
      return $scope.save_as_recipe_modal = false;
    };
    $scope.clear_recipe_form_data = function() {
      var key, _results;
      _results = [];
      for (key in $scope.recipe_form_data) {
        _results.push($scope.recipe_form_data[key] = "");
      }
      return _results;
    };
    $scope.get_sum_selected_for_save = function() {
      var pk, selected, sum, _ref;
      sum = 0;
      _ref = $scope.selected_for_save;
      for (pk in _ref) {
        selected = _ref[pk];
        if (selected) {
          sum += parseFloat($scope.food_amounts[pk]);
        }
      }
      return $scope.sum_selected_for_save = sum.toFixed(2);
    };

    /*
    $scope.post_recipe = () ->
      data = {}
      data.amounts = {}
      for pk, selected of $scope.selected_for_save
        if selected
          data.amounts[pk] = $scope.food_amounts[pk]
      _.extend data, $scope.recipe_form_data
      data.weight1 = $scope.sum_selected_for_save
    
      $scope.recipe_posting = true
      $http(
        method: "POST"
        url: urls.save_as_recipe
        data: data
      ).success (data) ->
        $scope.save_as_recipe_modal_close()
        $scope.consolidate_recipe(data)
        $scope.clear_recipe_form_data()
        $scope.recipe_posting = false
     */

    /*
    $scope.consolidate_recipe = (data) ->
      for pk, selected of $scope.selected_for_save
        if selected
          $scope.trash_food parseInt pk
      FoodData.add_color_and_select data
      FoodData.food_amounts[data.pk] = $scope.sum_selected_for_save
      FoodData.sync_to_location()
      $scope.selected_for_save = {}
     */
    $scope.btn_class_for_submit = function(form) {
      return {
        'btn-danger': form.$invalid,
        'btn-success': form.$valid
      };
    };
    return $scope.has_weight2 = function() {
      var f, not_blank;
      f = $scope.recipe_form_data.weight2_desc;
      not_blank = f !== void 0 && f !== "";
      if (!not_blank) {
        delete $scope.recipe_form_data.weight2;
      }
      return not_blank;
    };
  };

  FoodTableController.$inject = ['$scope', '$http', '$location', 'FoodData', 'Config'];

  NutrientBreakdownController = function($scope, $http, $window, FoodData, Config) {
    _.extend($scope, FoodData);
    _.extend($scope, Config);
    $scope.nutrition_page = 1;
    $scope.nutrient_dialogs_open = {};
    $scope.windowWidth = $window.outerWidth;
    angular.element($window).bind('resize', function() {
      $scope.windowWidth = $window.outerWidth;
      return $scope.$apply('windowWidth');
    });
    $scope.nutrition_properties = PROPERTIES;
    $scope.nutrient_total = function(nutrient) {
      var d, fas, pk, total, _ref;
      fas = $scope.food_amounts;
      total = 0;
      _ref = $scope.selected_foods;
      for (pk in _ref) {
        d = _ref[pk];
        total += (d[nutrient] || 0) * (fas[pk] || 0) / 100;
      }
      return total.toFixed(1);
    };
    window.nutrient_total = $scope.nutrient_total;
    $scope.nutrient_contributions = function(nutrient) {
      var amt, d, fas, pk, ret, revosf, _i, _len;
      fas = $scope.food_amounts;
      ret = [];
      revosf = $scope.ordered_selected_foods.slice(0).reverse();
      for (_i = 0, _len = revosf.length; _i < _len; _i++) {
        pk = revosf[_i];
        if ($scope.selected_foods.hasOwnProperty(pk)) {
          d = $scope.selected_foods[pk];
          amt = (d[nutrient] || 0) * (fas[pk] || 0) / 100;
          ret.push({
            pk: pk,
            amt: amt,
            desc: d.long_desc,
            bcolor: d.bcolor,
            pastel_color: d.pastel_color,
            nutrient: nutrient
          });
        }
      }
      return ret;
    };

    /*
    $scope.open_nutrient_detail = (nutrient) ->
      $http(
        method: "GET"
        url: urls.foods_highest_in
        params:
          nutrient: nutrient
      ).success (data) ->
        $scope.high_in_nutrient = data
        $scope.nutrient_dialogs_open[nutrient] = true
    
    $scope.page_changed = (page, nutrient) ->
      $http(
        method: "GET"
        url: urls.foods_highest_in
        params:
          nutrient: nutrient
          page: page
      ).success (data) ->
        $scope.high_in_nutrient = data
     */
    $scope.close_nutrient_detail = function(nutrient) {
      return $scope.nutrient_dialogs_open[nutrient] = false;
    };
    return $scope.ensure_nutrient = function(nutrient) {
      return ensure_nutrients.indexOf(nutrient) > -1;
    };
  };

  NutrientBreakdownController.$inject = ['$scope', '$http', '$window', 'FoodData', 'Config'];

  angular.module('RecipeUI').controller('MainFoodController', MainFoodController);

  angular.module('RecipeUI').controller('FoodSearchController', FoodSearchController);

  angular.module('RecipeUI').controller('FoodTableController', FoodTableController);

  angular.module('RecipeUI').controller('NutrientBreakdownController', NutrientBreakdownController);

}).call(this);
