// Generated by CoffeeScript 1.7.1
(function() {
  var componentToHex;

  window.global = window.global || {};

  global.hashCode = function(str) {
    var hash, i, _i, _ref;
    hash = 0;
    for (i = _i = 0, _ref = str.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
  };

  global.intToARGB = function(i) {
    var a, b, c, d, ret;
    a = ((i >> 24) & 0xFF).toString(16);
    b = ((i >> 16) & 0xFF).toString(16);
    c = ((i >> 8) & 0xFF).toString(16);
    d = (i & 0xFF).toString(16);
    ret = a + b + c + d;
    while (ret.length < 6) {
      ret += "0";
    }
    return ret;
  };

  global.stringToColor = function(s) {
    return "#" + global.intToARGB(global.hashCode(s)).slice(0, 6);
  };

  componentToHex = function(c) {
    var hex;
    c = parseInt(c);
    hex = c.toString(16);
    if (hex.length === 1) {
      return "0" + hex;
    } else {
      return hex;
    }
  };

  global.rgbToHex = function(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
  };

  global.hexToRgb = function(hex) {
    var result, shorthandRegex;
    shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      };
    } else {
      return null;
    }
  };

  global.pastelize = function(color_string) {
    var b, g, r, rgb;
    rgb = global.hexToRgb(color_string);
    r = (rgb.r + 255 * 2) / 3;
    g = (rgb.g + 255 * 2) / 3;
    b = (rgb.b + 255 * 2) / 3;
    return global.rgbToHex(r, g, b);
  };

  global.get_width = function() {
    if (self.innerHeight != null) {
      return self.innerWidth;
    }
  };


  /*
            else if (document.documentElement && document.documentElement.clientHeight)
            {
                    x = document.documentElement.clientWidth;
            }
            else if (document.body)
            {
                    x = document.body.clientWidth;
            }
            return x;
    }
  
    function GetHeight()
    {
            var y = 0;
            if (self.innerHeight)
            {
                    y = self.innerHeight;
            }
            else if (document.documentElement && document.documentElement.clientHeight)
            {
                    y = document.documentElement.clientHeight;
            }
            else if (document.body)
            {
                    y = document.body.clientHeight;
            }
            return y;
    }
   */

  if (Array.prototype.indexOf == null) {
    Array.prototype.indexOf = function(needle) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this[i] === needle) {
          return i;
        }
      }
      return -1;
    };
  }

  global.add_reduce_f = function(memo, num) {
    return memo + num;
  };

}).call(this);
