// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var FoodData, lbsToGramsTemplate, min_max_dict;

  window.RecipeUI = angular.module('RecipeUI', ['ui.utils', 'ui.bootstrap', 'ngCookies']);

  RecipeUI.factory('Config', function() {
    return {
      dialog_options: {
        backdropFade: true,
        dialogFade: true
      }
    };
  });

  FoodData = function($http, $location, $cookies, $timeout) {
    FoodData = {
      ordered_selected_foods: [],
      selected_foods: {},
      food_amounts: {}
    };
    FoodData.add_color_and_select = function(data, add) {
      var index, pk;
      if (add == null) {
        add = true;
      }
      pk = data.pk;
      data.bcolor = global.stringToColor(data.long_desc);
      data.pastel_color = global.pastelize(data.bcolor);
      FoodData.selected_foods[pk] = data;
      if (add) {
        index = FoodData.ordered_selected_foods.indexOf(pk);
        if (index > -1) {
          FoodData.ordered_selected_foods.splice(index, 1);
        }
        FoodData.ordered_selected_foods.unshift(pk);
        return $location.hash(FoodData.ordered_selected_foods.join(','));
      }
    };
    FoodData.select_food = function(pk, add) {
      if (add == null) {
        add = true;
      }
      return $http({
        method: "GET",
        url: "/food/" + pk
      }).success(function(data) {
        return FoodData.add_color_and_select(data, add);
      });
    };
    FoodData.sync_from_location = function() {
      var i;
      _.extend(FoodData.food_amounts, $location.search());
      if ($location.hash() !== "") {
        return FoodData.ordered_selected_foods.push.apply(FoodData.ordered_selected_foods, (function() {
          var _i, _len, _ref, _results;
          _ref = $location.hash().split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(parseInt(i));
          }
          return _results;
        })());
      }
    };
    FoodData.sync_to_location = function() {
      $location.search(FoodData.food_amounts);
      return $location.hash(FoodData.ordered_selected_foods.join(','));
    };
    FoodData.load_ordered_selected_foods = function() {
      return $http({
        method: "GET",
        url: "/food",
        params: {
          filter__pk__in: FoodData.ordered_selected_foods,
          limit: FoodData.ordered_selected_foods.length
        }
      }).success(function(data) {
        var food, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          food = data[_i];
          _results.push(FoodData.add_color_and_select(food, false));
        }
        return _results;
      }).error(function() {
        return console.log("ERROR!");
      });
    };
    FoodData.save_food_cookies = function() {
      var fd;
      fd = {};
      fd.food_amounts = FoodData.food_amounts;
      fd.ordered_selected_foods = FoodData.ordered_selected_foods;
      $cookies.FoodData = JSON.stringify(fd);
    };
    FoodData.trash_food = function(pk) {
      var index;
      delete FoodData.selected_foods[pk];
      delete FoodData.food_amounts[pk];
      index = FoodData.ordered_selected_foods.indexOf(pk);
      if (index > -1) {
        FoodData.ordered_selected_foods.splice(index, 1);
        return $location.hash(FoodData.ordered_selected_foods.join(','));
      }
    };
    FoodData.trash_all = function() {
      var osf, pk, _i, _len, _results;
      osf = FoodData.ordered_selected_foods.slice(0);
      _results = [];
      for (_i = 0, _len = osf.length; _i < _len; _i++) {
        pk = osf[_i];
        _results.push(FoodData.trash_food(pk));
      }
      return _results;
    };

    /* userprofile stuff
    FoodData.save_wip = () ->
      hash = $location.url()
      if hash is window.userprofile.wip
        return
      $http(
        method: "POST"
        url: "/update-wip"
        data:
          hash: hash
      ).success (data) ->
        userprofile.wip = hash
     */

    /*
    promise = null
    FoodData.timeout_save_wip = () ->
       * if we don't have a bmr, we haven't saved the profile.
      if window.userprofile.bmr is undefined
        return
      $timeout.cancel promise
      promise = $timeout FoodData.save_wip, 10000
     */
    return FoodData;
  };

  RecipeUI.factory('FoodData', ['$http', '$location', '$cookies', '$timeout', FoodData]);

  lbsToGramsTemplate = "<input type=\"text\" class=\"input-lg\" ng-model=\"lbs\" placeholder=\"lbs to grams\">\n{{ convert_lbs_to_grams(lbs) }}";

  RecipeUI.directive('lbsToGrams', function() {
    return {
      restrict: 'EA',
      template: lbsToGramsTemplate,
      controller: [
        '$scope', function($scope) {
          return $scope.convert_lbs_to_grams = function(lbs) {
            var grams;
            grams = (lbs * 453.6).toFixed(2);
            if ((isNaN(grams)) || (lbs === "") || (lbs === void 0)) {
              return "";
            } else {
              return "lbs = " + grams + " grams";
            }
          };
        }
      ]
    };
  });

  min_max_dict = {
    calories: [1200, 3000],
    protein: [60, 300],
    fat: [30, 200],
    carbohydrate: [0, 100],
    net_carbs: [0, 60],
    fiber: [20, 60],
    sugar: [20, 300],
    calcium: [500, 2000],
    iron: [12, 20],
    magnesium: [350, 1500],
    phosphorus: [500, 3000],
    potassium: [2500, 7000],
    sodium: [2000, 6000],
    zinc: [12, 20],
    copper: [0.9, 10],
    flouride: [0, 500],
    manganese: [1.8, 10],
    selenium: [90, 1000],
    vit_a: [2000, 10000],
    vit_c: [75, 10000],
    vit_d: [200, 10000],
    vit_e: [12, 40],
    thiamin: [1.1, 5],
    riboflavin: [1.1, 5],
    niacin: [14, 350],
    pantothenic_acid: [5, 100],
    vit_b6: [1.3, 100],
    folate: [400, 1000],
    vit_b12: [2.4, 10],
    choline: [425, 3500],
    vit_k: [90, 2500],
    betaine: [25, 600],
    cholesterol: [0, 2000],
    trans_fat: [0, 3],
    saturated_fat: [3, 100],
    monounsaturated_fat: [3, 100],
    polyunsaturated_fat: [3, 100],
    omega3: [1, 30],
    omega6: [2, 50]
  };

  RecipeUI.directive('nutrientVisualization', function() {
    return {
      restrict: 'E',
      link: function(scope, element, attrs) {
        var chart, draw, height, tip;
        height = 480;
        chart = d3.select(element[0]);
        chart = chart.append('svg').attr('width', '100%').attr('height', height + 'px');
        tip = d3.tip().attr('class', 'd3-tip').html(function(d) {
          return "<h5>" + d.desc + "</h5> " + d.amt + " " + attrs.nutrient;
        });
        chart.call(tip);
        draw = function() {
          var circle, data, enter, max, r;
          data = scope.nutrient_contributions(attrs.nutrient);
          max = min_max_dict[attrs.nutrient][1];
          if (data.length > 0) {
            circle = chart.selectAll('circle').data(data);
            circle.exit().remove();
            enter = circle.enter().append('circle');
            enter.on('mouseover', tip.show).on('mouseout', tip.hide).attr("fill", function(d) {
              return d.pastel_color;
            });
            r = d3.scale.linear().range([0, height]).domain([0, max]);
            return circle.transition().duration(2000).attr("r", function(d) {
              return r(parseFloat(d.amt));
            }).attr("cy", height / 2).attr("cx", function(d, i) {
              return i * (height / 6) + (height / 6);
            });
          }
        };
        scope.$watch('food_amounts', draw, true);
        scope.$watch('selected_foods', draw, true);
        return scope.$watch('windowWidth', draw, true);
      }
    };
  });

  RecipeUI.directive('nutrientsSummary', function() {
    return {
      restrict: 'E',
      link: function(scope, element, attrs) {
        var chart, draw, height, individual_height;
        console.log(scope);
        window.scope = scope;
        individual_height = 100;
        height = scope.nutrition_properties.length * individual_height;
        chart = d3.select(element[0]);
        chart = chart.append('div').attr('width', '100%').attr('height', height + 'px');
        draw = function() {
          var data, enter, nutrient, nutrient_divs, rects, subd, width, _i, _len, _ref;
          data = [];
          _ref = scope.nutrition_properties;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nutrient = _ref[_i];
            subd = {
              name: nutrient,
              data: scope.nutrient_contributions(nutrient)
            };
            data.push(subd);
          }
          nutrient_divs = chart.selectAll('div').data(data);
          nutrient_divs.exit().remove();
          enter = nutrient_divs.enter().append('div');
          enter.append("h5").html(function(d) {
            return "" + d.name + " " + (scope.nutrient_total(d.name));
          });
          enter.append('svg').attr("y", function(d, i) {
            return i * individual_height;
          }).attr("height", "" + individual_height + "px").attr("width", "100%");
          nutrient_divs.select("h5").html(function(d) {
            return "" + d.name + " " + (scope.nutrient_total(d.name));
          });
          rects = nutrient_divs.select('svg').selectAll("rect").data(function(d) {
            return d.data;
          });
          rects.exit().remove();
          rects.enter().append("rect").attr("height", function() {
            return individual_height;
          }).attr("fill", function(d) {
            return d.pastel_color;
          });
          width = function(d) {
            var arr, max, maxr, nut_idx, r, scale, total, ___;
            nut_idx = scope.nutrition_properties.indexOf(d.nutrient);
            arr = (function() {
              var _j, _len1, _ref1, _results;
              _ref1 = data[nut_idx].data;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                ___ = _ref1[_j];
                _results.push(___.amt);
              }
              return _results;
            })();
            total = _.reduce(arr, global.add_reduce_f, 0);
            max = _.max([total, min_max_dict[d.nutrient][1]]);
            maxr = nutrient_divs.node().parentElement.parentElement.parentElement.parentElement.clientWidth;
            scale = d3.scale.linear().range([0, maxr]).domain([0, max]);
            r = scale(d.amt);
            return r;
          };
          return rects.transition().duration(2000).delay(0).attr("width", width).attr("x", function(d, i) {
            var nut_idx, widths_sofar, _j, _len1, _ref1;
            nut_idx = scope.nutrition_properties.indexOf(d.nutrient);
            widths_sofar = 0;
            _ref1 = data[nut_idx].data.slice(0, i);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              d = _ref1[_j];
              widths_sofar += width(d);
            }
            return widths_sofar;
          });
        };
        scope.$watch('food_amounts', draw, true);
        scope.$watch('selected_foods', draw, true);
        return scope.$watch('windowWidth', draw, true);
      }
    };
  });

}).call(this);
